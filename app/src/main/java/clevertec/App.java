/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clevertec;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

import clevertec.account_interest.scheduler.InterestChecker;
import clevertec.account_interest.scheduler.InterestCheckerFactory;
import clevertec.transaction.ActionType;
import clevertec.transaction.Transaction;
import clevertec.transaction.TransactionAction;
import clevertec.transaction.TransactionException;
import clevertec.transaction.TransactionHelper;
import clevertec.transaction.TransactionComputation;
import clevertec.transaction.check.ActionDescription;
import clevertec.transaction.check.TransactionCheck;
import clevertec.transaction.check.TransactionPrinterFactory;

public class App {

    /**
     * @param args
     * @throws InterruptedException
     * @throws ExecutionException
     */
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        System.out.println("Hello world!");
    }

    static public void example1() {
        var bank = new Bank("example");
        var user1 = new User("Kolya", "Urusov", "1990-02-23");
        var user2 = new User("Pasha", "Urusov", "1990-02-23");
        var account1 = new Account();
        account1.setUser(user1);
        account1.setBank(bank);
        account1.setBalance(100);
        var account2 = new Account();
        account2.setUser(user2);
        account2.setBank(bank);
        account2.setBalance(100);
        account1.setId(1);
        account2.setId(2);

        Transaction transaction = new Transaction(account1);
        System.out.println("Before 1:: " + account1.getBalance());
        System.out.println("Before 2:: " + account2.getBalance());

        Transaction transaction2 = new Transaction(account2, account1);

        try {
            TransactionComputation runner1 = transaction.begin();
            runner1.transfer(new TransactionAction(ActionType.SUB, 5));
            TransactionComputation runner2 = transaction2.begin();
            runner2.transfer(new TransactionAction(ActionType.ADD, 15));
        } catch (TransactionException e) {
            throw new RuntimeException(e);
        }

        System.out.println("After1 :: " + account1.getBalance());
        System.out.println("After2 :: " + account2.getBalance());
    }

    static public void example2() {
        var bank = new Bank("example");
        var user1 = new User("Kolya", "Urusov", "1990-02-23");
        var user2 = new User("Pasha", "Urusov", "1990-02-23");
        var account1 = new Account();

        account1.setUser(user1);
        account1.setBank(bank);
        account1.setBalance(100);
        var account2 = new Account();
        account2.setUser(user2);
        account2.setBank(bank);
        account2.setBalance(100);
        account1.setId(1);
        account2.setId(2);

        Transaction transaction = new Transaction(account1);
        System.out.println("Before 1:: " + account1.getBalance());
        System.out.println("Before 2:: " + account2.getBalance());

        Transaction transaction2 = new Transaction(account2, account1);

        try {
            transaction.beginTransaction(
                    new TransactionAction(ActionType.SUB, 5));
            transaction2.beginTransaction(
                    new TransactionAction(ActionType.ADD, 15));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        System.out.println("After1 :: " + account1.getBalance());
        System.out.println("After2 :: " + account2.getBalance());

    }

    static public String example3() {
        TransactionCheck c = new TransactionCheck();
        c.setDateTime(LocalDateTime.now());
        c.setDescription(ActionDescription.ACCOUNT_TRANSFER_ADD);
        Account acc1 = new Account();
        acc1.setBank(new Bank("Bank1"));
        acc1.setAccountNumber("123");
        Account acc2 = new Account();
        acc2.setBank(new Bank("Bank 2"));
        acc2.setAccountNumber("1234");
        c.setId(UUID.randomUUID());
        c.setOrigin(acc1);
        c.setTarget(acc2);
        c.setTransferAmount(100);

        return TransactionPrinterFactory.stringPrinter().view(c);
    }

    static public void exampleInterestChecker() {
        InterestChecker checker = InterestCheckerFactory.aInterestChecker();
        checker.run();

        checker.stop();
    }

}
